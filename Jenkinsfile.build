#!groovy

void printLineSep(String title) {
    echo "=================================="
    if (title != null) {
        echo "${title}"
        echo " "
    }
}

node {
    def scmVars = checkout scm

    stage('Set-PATH') {
        def mavenHome = tool 'M3'
        def dockerHome = tool 'DOCKER'
        env.PATH = "${dockerHome}/bin:${mavenHome}/bin:${env.PATH}"

        printLineSep("PATHS")
        echo "${env.URL_SERVER_CONSUL}"
    }

    stage("Pre-flight") {
        printLineSep("SCM - Branch")
        echo "${env.BRANCH_NAME}"

        printLineSep("SCM - ChangeSets")
        def changeLogSets = currentBuild.changeSets
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int entryIndex = 0; entryIndex < entries.length; entryIndex++) {
                def entry = entries[entryIndex];
                echo "${entry}"
            }
        }
    }

    stage("Validate") {
        sh """
             mvn validate
        """
    }

    stage("Compile") {
        sh """
             mvn clean compile
        """
    }

    stage("Test") {
        sh """
             mvn test
        """
    }

    stage("Coverage") {
        jacoco(
                execPattern: 'target/*.exec',
                classPattern: 'target/classes',
                sourcePattern: 'src/main/java',
                exclusionPattern: 'src/test*'
        )
    }

    //if (env.BRANCH_NAME == "master") {

    stage("Nexus") {
        withCredentials([string(credentialsId: 'admin')]) {
            sh """
                mvn source:jar deploy -DskipTests -Premote
            """
        }
    }

    stage("Docker") {
        printLineSep("Docker - Host")
        echo "${env.DOCKER_HOST}"

        docker.withServer(env.DOCKER_HOST) {
            def pom = readMavenPom file: 'pom.xml'
            sh """
                chmod +x ./docker-build.sh
                bash ./docker-build.sh ${pom.version}
            """
        }
    }

    stage('Deploy') {
        build job: 'Sample-App-Deploy',
                parameters: [
                        [$class: 'BooleanParameterValue', name: 'runSmokeTest', value: true],
                        [$class: 'BooleanParameterValue', name: 'runLoadTest', value: true]
                ]
    }
    //}
}
